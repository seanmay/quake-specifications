<HTML><HEAD>
<TITLE>Quake-C Specificacions  v1.0</TITLE>
<LINK REV="MADE" HREF="mailto:Olivier.Montanuy@wanadoo.fr">
</HEAD>  
<BODY BGCOLOR="#FFFFFF">

<H1><FONT COLOR="#007F00"><A NAME="QC-MDL">3. Quake-C Model definitions</A></FONT></H1>


<p><i>(Derived from information published by Steve Tietze)</i></p>

<p>The Quake-C code files are used to define entity behavior, but they
are also used to define the animation of models (.MDL files) used for
monsters, players, and some objects.
</p>
<p>The model informations are stored on special lines of code that 
all begin with a <b>$</b>. They cannot be placed inside a function
definition. Some of this information is not even interpreted by the Quake-C 
compiler, but it's useful for the program <b>modelgen</b> that generates 
the models.
</p>

<h4>Model name</h4>
<p><pre>
<b><a name="s_modelname">$modelname</a></b> <i>name</i>
</pre>
<i>name</i> is the name of the model file defining the object.
For instance:
<pre>
<b>$name armor</b>
</pre>
</p>

<h4>directory</h4>
<p><pre>
<b><a name="s_cd">$cd</a></b> <i>dir</i>
</pre>
Specify the directory where your model file (.MDL) is located.
For instance:
<pre>
<b>$cd  /evil/models/armor</b>.
</pre>
</p>
<h4>Special animation flags</h4>
<p><pre>
<b><a name="s_flags">$flags</a></b>  <i>flag_value</i>
</pre>
This field is not interpreted by Quake-C, but it's useful for the
program <b>modelgen</b> that generates the models.<br>
Rotation of the object.
</p>
<p>Possible values for the flag:
<ul>
<li> 8: the object keeps rotating, like armors.
<li> other values are not known yet
</ul>
</p>
<h4>Origin</h4>
<p><pre>
<b><a name="s_origin">$origin</a></b> <i>x y z</i>
</pre>
This field is not interpreted by Quake-C, but it's useful for the
program <b>modelgen</b> that generates the models.<br>
Location of the object within the bounding box, in the quake editor.<br>
ex: <b>$origin  0 0 8</b>
</p>
<h4>Scale factor</h4>
<p><pre>
<b><a name="s_scale">$scale</a></b> <i>number</i>
</pre>
This field is not interpreted by Quake-C, but it's useful for the
program <b>modelgen</b> that generates the models.<br>
<i>number</i> comes from the texmake number that is generated.<br>
You can use different values if you want.<br>
ex: <b>$scale 4</b>
</p>
<h4>Base</h4>
<p><pre>
<b><a name="s_base">$base</a></b>  <i>object</i>
</pre>
This field is not interpreted by Quake-C, but it's useful for the
program <b>modelgen</b> that generates the models.<br>
<i>object</i> is the name of a model file, that will be used as
a kind of starting position, for animation.
</p>

<h4>Skin file</h4>

<p><pre>
<b><a name="s_skin">$skin</a></b>  <i>skinfile</i>
</pre>
This field is not interpreted by Quake-C, but it's useful for the
program <b>modelgen</b> that generates the models.<br>
<i>skinfile</i> is the name (without extension) of the <b>.lbm</b> file that defines
the skin of the object, as generated by the program <b>texmake</b>.
</p>

<h4>Frame definitions</h4>
<pre>
<b><a name="s_frame">$frame</a></b>  <i>frame1</i> <i>frame2</i> ...
</pre>

This defines several animation frames of the object.<br>
For every animation frame defined, you must also define a Quake-C 
<a href="#>frame function</a>, that will be called during this animation frame. 
For instance:<br>
<pre>
<b>$frame walk1 walk2 walk3 walk4</b>
void() man_walk1 = [ <b>$walk1</b>, man_walk2 ] { ... some code ... };
void() man_walk2 = [ <b>$walk2</b>, man_walk3 ] { ... some code ... };
void() man_walk3 = [ <b>$walk3</b>, man_walk4 ] { ... some code ... };
void() man_walk4 = [ <b>$walk4</b>, man_walk1 ] { ... some code ... };
</pre>

<p>In the brackets, the first parameter defines the name of the frame
(as found in the model file), and the second parameter defined the 
function that is to be executed in the next frame (by setting the
value of self.<a href="qc-enty.htm#dot_nextthink" target="content">nextthink</a>).</p>

<p>Most of these functions do nothing special, but some can be very complex
(for instance, the functions that are called when the monster tries
to see a player).</p>



<hr>

<H1><FONT COLOR="#007F00"><A NAME="QC-USE">4. Using Quake-C</A></FONT></H1>

<H2><A NAME="QC-COMP">4.1 Compilation of Quake-C</A></H2>

<h3>Compiling the source files</h3>

<p>In order to use a Quake-C program, you must compile it into a file
named <b>PROGS.DAT</b>. This is done by using the tool named <b>qcc</b>
in the directory where all the Quake-C sources are.
<b>qcc</b> is the Quake-C Compiler made by John Carmack of id software,
it can be found on their ftp site, or on any mirror.
</p>



<p>You must declare all the <b>.QC</b> source files in the file named
<b>PROGS.SRC</b>. Note that all the <b>.QC</b> files will be compiled
at the same time, and they be read in the same order as they are declared 
in <b>PROGS.SRC</b>.</p>

<p> Countrary to most language compilers, <b>qcc</b> behaves just as if 
all the <b>.QC</b> files were concatenated into a single big file.
If you use an identifier (a name) that is already used somewhere in
another <b>.QC</b> file, that will cause a conflict and compilation
will fail.</p>

<p>So the best is to place your function declarations at the end
of the first file, <b>defs.h</b> (so that they can be seen in all the 
code) but place your new <b>.QC</b> files (with function definitions)
at the end of the list, so as to be sure that if a conflict happen,
it will happen in your own files.
</p>

<p>Note that <b>qcc</b> is not very user friendly, and does limited
checks on the code. So you might wish to look for a better tool to 
compile your <b>.QC</b> code.</p>

<p>Note from John Carmack:<br>
<i>Error recovery during compilation is minimal.  It will skip 
to the next global definition, so you will never see more 
than one error at a time in a given function.  All compilation
aborts after ten error messages.</i>
</p>


<h4>Using the compiled PROGS.DAT</h4>

<p>To use a custom PROGS.DAT that you just compiled, you only need
to put it at the right place amoung the Quake game directory, and 
then Quake will find it automatically at startup.
</p>
<p>The default PROGS.DAT can be found in the main pack file, <b>pak0.pak</b>
in the directory <b>id1</b>. You could store your custom PROGS.DAT into 
that same directory <b>id1</b>.
</p>
<P>Preferably, put PROGS.DAT in a special directory created for your 
own modified game, and that you will indicate to Quake with the option
<b>-game</b>. </p>


<h3>Beware of the Quake-C compiler</h3>

<p><i>Here are some remarks by Adnan Zafar (zafar@hal-pc.org)</i></p>

<p>The compiler only catches syntax and other language-style errors.  It will 
not warn you of things that generate run-time errors.. and definitely doesn't guarantee that things will
work the way you want.  It's been my experience that I have to compile and test
something 6 or 8 times; the first few times it doesn't work at all, and the last
few it doesn't work exactly right.  [...] I just don't want you to think
that all the code that compiles will have a good chance of working. In all
likelihood, it won't.
</p>
 

<hr>
<h2><A NAME="QC-CEXEC">4.1 Running Quake-C code</A></h2>

<p>Here are some more remarks from John Carmack:<br>
Code execution is initiated by C code in quake from two main places:  
the timed think routines for periodic control, and the touch function when 
two objects impact each other.
</p>
<p>Execution is also caused by a few uncommon events, like the 
addition of a new client to an existing server.
</p>	
<p>There is a runnaway counter that stops a program if 100000 
statements are executed, assuming it is in an infinite loop.
</p>
<p>It is acceptable to change the system set global variables.  
This is usually done to pose as another entity by changing 
self and calling a function.
</p>
<p>The interpretation is fairly efficient, but it is still over 
an order of magnitude slower than compiled C code.  All time 
consuming operations should be made into built in functions.
</p>
<p>A profile counter is kept for each function, and incremented 
for each interpreted instruction inside that function.  The 
"profile" console command in Quake will dump out the top 10 
functions, then clear all the counters.  The "profile all" 
command will dump sorted stats for every function that has 
been executed.
</p>


</BODY></HTML>